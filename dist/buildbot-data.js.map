{"version":3,"sources":["bowerdeps.js","data.module.js","data.constant.js","classes/base.service.js","classes/build.service.js","classes/builder.service.js","classes/buildrequest.service.js","classes/buildset.service.js","classes/change.service.js","classes/changesource.service.js","classes/forcescheduler.service.js","classes/logs.service.js","classes/master.service.js","classes/properties.service.js","classes/scheduler.service.js","classes/sourcestamp.service.js","classes/step.service.js","classes/worker.service.js","services/data/data.service.js","services/dataUtils/dataUtils.service.js","services/rest/rest.service.js","services/socket/socket.service.js","services/socket/webSocketBackend.service.js","services/socket/websocket.service.js","services/stream/stream.service.js","services/data/collection/collection.service.js","services/data/collection/dataquery.service.js"],"names":["_global","eval","BOWERDEPS","BBData","constructor","angular","module","Api","String","Endpoints","constant","Base","dataService","socketService","dataUtilsService","BaseInstance","object","_endpoint","childEndpoints","isString","TypeError","endpoint","$accessor","update","generateFunctions","classId","_id","type","setAccessor","a","o","extend","get","args","Array","from","control","method","params","endpoints","forEach","e","E","capitalize","prototype","query","splitOptions","subscribe","accessor","factory","Build","BuildInstance","Builder","BuilderInstance","Buildrequest","BuildrequestInstance","Buildset","BuildsetInstance","Change","ChangeInstance","author","email","emailInString","split","length","author_name","replace","RegExp","author_email","Changesource","ChangesourceInstance","Forcescheduler","ForceschedulerInstance","Log","Master","MasterInstance","Propertie","Scheduler","SchedulerInstance","Sourcestamp","SourcestampInstance","Step","Worker","WorkerInstance","Data","initClass","cache","$log","$injector","$q","restService","Collection","ENDPOINTS","DataService","self","undefined","mocks","spied","onclose","socketCloseListener","generateEndpoints","subscribePromise","warn","restPath","collection","resolve","then","response","datalist","isArray","error","initial","ep","id","post","getNextId","jsonrpc","open","DataAccessor","collectionRefs","registerCollection","c","push","close","closeOnDestroy","scope","isFunction","$on","when","url","returnValue","jasmine","spyOn","and","callFake","_mockGet","expect","_expects","verifyNoOutstandingExpectation","fail","toJson","processArguments","queryWithoutSubscribe","k","v","shift","exp_url","exp_query","toEqual","Error","createCollection","idCounter","d","hasOwnProperty","service","DataUtils","string","toUpperCase","slice","toLowerCase","arg","copyOrSplit","filter","pop","singularType","className","socketPath","stars","endsWith","concat","join","socketPathRE","endpointPath","arrayOrString","unWrap","path","last","isObject","parse","fromJson","numberOrString","str","isNumber","number","parseInt","isNaN","emailRegex","exec","Rest","$http","API","RestService","execute","config","reject","success","data","reason","canceller","defer","headers","timeout","promise","cancel","Socket","$rootScope","$location","Stream","webSocketService","SocketService","eventStream","queue","deferred","subscribers","socket","getWebSocket","getUrl","onopen","flush","setupEventStream","onmessage","message","code","$applyAsync","send","nextId","readyState","OPEN","result","getRootPath","location","pathname","host","protocol","defaultport","port","eventPath","l","cmd","unsubscribe","pos","indexOf","splice","WebSocketBackend","MockWebSocket","sendQueue","receiveQueue","webSocket","WebSocket","$window","WebSocketProvider","match","ReconnectingWebSocket","StreamInstance","onUnsubscribe","listeners","listener","generateId","i","removed","map","destroy","lastId","DataQuery","$timeout","CollectionInstance","constructorImpl","bind","queryExecutor","onUpdate","noop","onNew","onChange","_new","_updated","_byId","$resolved","WrapperClass","console","log","callback","getArray","key","m","test","put","recomputeQuery","sendEvents","item","add","element","instance","$collection","old","clear","delete","index","computeQuery","opts","changed","includes","Object","defineProperty","copyFrom","copyfrom","DataQueryClass","filters","fieldAndOperator","value","array","order","sort","limit","isFiltered","cmpByOp","field","operator","cmp","keys","op","compare","property","reverse","b","f"],"mappings":"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","file":"buildbot-data.js","sourcesContent":["(function(){ var _global = (0, eval)('this');\nif (typeof _global.BOWERDEPS === 'undefined') { _global.BOWERDEPS = {}; }\n})();","// Register new module\nclass BBData {\n    constructor() {\n        return [];\n    }\n}\n\nangular.module('bbData', new BBData());\n","class Api {\n    constructor() { return new String('api/v2/'); }\n}\n\nclass Endpoints {\n    constructor() {\n        // Rootlinks\n        return [\n            'builders',\n            'builds',\n            'buildrequests',\n            'workers',\n            'buildsets',\n            'changes',\n            'changesources',\n            'masters',\n            'sourcestamps',\n            'schedulers',\n            'forceschedulers'\n        ];\n    }\n}\n\n\nangular.module('bbData')\n.constant('API', new Api())\n.constant('ENDPOINTS', new Endpoints());\n","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Base {\n    constructor(dataService, socketService, dataUtilsService) {\n        let BaseInstance;\n        return (BaseInstance = class BaseInstance {\n            constructor(object, _endpoint, childEndpoints) {\n                this._endpoint = _endpoint;\n                if (childEndpoints == null) { childEndpoints = []; }\n                if (!angular.isString(this._endpoint)) {\n                    throw new TypeError(`Parameter 'endpoint' must be a string, not ${typeof this.endpoint}`);\n                }\n\n                this.$accessor = null;\n                // add object fields to the instance\n                this.update(object);\n\n                // generate loadXXX functions\n                this.constructor.generateFunctions(childEndpoints);\n\n                // get the id of the class type\n                const classId = dataUtilsService.classId(this._endpoint);\n                this._id = this[classId];\n\n                // reset endpoint to base\n                if (this._id != null) {\n                    this._endpoint = dataUtilsService.type(this._endpoint);\n                }\n            }\n\n            setAccessor(a) {\n                return this.$accessor = a;\n            }\n\n            update(o) {\n                return angular.extend(this, o);\n            }\n\n            get(...args) {\n                return dataService.get(this._endpoint, this._id, ...Array.from(args));\n            }\n\n            control(method, params) {\n                return dataService.control(this._endpoint, this._id, method, params);\n            }\n\n            // generate endpoint functions for the class\n            static generateFunctions(endpoints) {\n                return endpoints.forEach(e => {\n                    // capitalize endpoint names\n                    const E = dataUtilsService.capitalize(e);\n                    // adds loadXXX functions to the prototype\n                    this.prototype[`load${E}`] = function(...args) {\n                        return this[e] = this.get(e, ...Array.from(args));\n                    };\n\n                    // adds getXXX functions to the prototype\n                    return this.prototype[`get${E}`] = function(...args) {\n                        let query;\n                        [args, query] = Array.from(dataUtilsService.splitOptions(args));\n                        if (this.$accessor) {\n                            if (query.subscribe == null) { query.subscribe = true; }\n                            query.accessor = this.$accessor;\n                        }\n                        return this.get(e, ...Array.from(args), query);\n                    };\n                });\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Base', ['dataService', 'socketService', 'dataUtilsService', Base]);","class Build {\n    constructor(Base, dataService) {\n        let BuildInstance;\n        return (BuildInstance = class BuildInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'changes',           // /changes\n                    'properties',        // /properties\n                    'steps'             // /steps/:name\n                                        // /steps/:stepid\n                ];\n\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Build', ['Base', 'dataService', Build]);\n","class Builder {\n    constructor(Base, dataService) {\n        let BuilderInstance;\n        return (BuilderInstance = class BuilderInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'builds',            // /builds/:buildid\n                    'buildrequests',     // /buildrequests/:buildrequestid\n                    'forceschedulers',   // /forceschedulers\n                    'workers',           // /workers/:workerid\n                                        // /workers/:name\n                    'masters'           // /masters/:masterid\n                ];\n\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Builder', ['Base', 'dataService', Builder]);\n","class Buildrequest {\n    constructor(Base, dataService) {\n        let BuildrequestInstance;\n        return (BuildrequestInstance = class BuildrequestInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'builds'            // /builds\n                ];\n\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Buildrequest', ['Base', 'dataService', Buildrequest]);\n","class Buildset {\n    constructor(Base, dataService) {\n        let BuildsetInstance;\n        return (BuildsetInstance = class BuildsetInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'properties'        // /properties\n                ];\n\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Buildset', ['Base', 'dataService', Buildset]);","/*\n * decaffeinate suggestions:\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Change {\n    constructor(Base, dataService, dataUtilsService) {\n        let ChangeInstance;\n        return (ChangeInstance = class ChangeInstance extends Base {\n            constructor(object, endpoint) {\n                super(object, endpoint);\n                let { author } = this;\n                if ((this.author == null)) {\n                    author = \"unknown\";\n                }\n\n                const email = dataUtilsService.emailInString(author);\n                // Remove email from author string\n                if (email) {\n                    if  (author.split(' ').length > 1) {\n                        this.author_name = author.replace(new RegExp(`\\\\s<${email}>`), '');\n                        this.author_email = email;\n                    } else {\n                        this.author_name = email.split(\"@\")[0];\n                        this.author_email = email;\n                    }\n                } else {\n                    this.author_name = author;\n                }\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Change', ['Base', 'dataService', 'dataUtilsService', Change]);","class Changesource {\n    constructor(dataService, Base) {\n        let ChangesourceInstance;\n        return (ChangesourceInstance = class ChangesourceInstance extends Base {\n            constructor(object, endpoint) {\n                super(object, endpoint);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Changesource', ['dataService', 'Base', Changesource]);","class Forcescheduler {\n    constructor(Base, dataService) {\n        let ForceschedulerInstance;\n        return (ForceschedulerInstance = class ForceschedulerInstance extends Base {\n            constructor(object, endpoint) {\n                super(object, endpoint);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Forcescheduler', ['Base', 'dataService', Forcescheduler]);","class Log {\n    constructor(Base, dataService) {\n        let BuildInstance;\n        return (BuildInstance = class BuildInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'chunks',           // /chunks\n                    'contents'\n                ];\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Log', ['Base', 'dataService', Log]);","class Master {\n    constructor(Base, dataService) {\n        let MasterInstance;\n        return (MasterInstance = class MasterInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'builders',          // /builders/:builderid\n                    'workers',           // /workers/:workerid\n                                        // /workers/:name\n                    'changesources',     // /changesources/:changesourceid\n                    'schedulers'        // /schedulers/:schedulerid\n                ];\n\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Master', ['Base', 'dataService', Master]);","// damn grammar. I claim that properties singular is propertie\nclass Propertie {\n    constructor(Base, dataService) {\n        let BuildInstance;\n        return (BuildInstance = class BuildInstance extends Base {\n            constructor(object, endpoint) {\n                super(object, endpoint, []);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Propertie', ['Base', 'dataService', Propertie]);","class Scheduler {\n    constructor(Base, dataService) {\n        let SchedulerInstance;\n        return (SchedulerInstance = class SchedulerInstance extends Base {\n            constructor(object, endpoint) {\n                super(object, endpoint);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Scheduler', ['Base', 'dataService', Scheduler]);","class Sourcestamp {\n    constructor(Base, dataService) {\n        let SourcestampInstance;\n        return (SourcestampInstance = class SourcestampInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'changes'           // /changes\n                ];\n\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Sourcestamp', ['Base', 'dataService', Sourcestamp]);","class Step {\n    constructor(Base, dataService) {\n        let BuildInstance;\n        return (BuildInstance = class BuildInstance extends Base {\n            constructor(object, endpoint) {\n                const endpoints = [\n                    'logs'           // /logs\n                ];\n\n                super(object, endpoint, endpoints);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Step', ['Base', 'dataService', Step]);","class Worker {\n    constructor(Base, dataService) {\n        let WorkerInstance;\n        return (WorkerInstance = class WorkerInstance extends Base {\n            constructor(object, endpoint) {\n                super(object, endpoint);\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('Worker', ['Base', 'dataService', Worker]);","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS206: Consider reworking classes to avoid initClass\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Data {\n    static initClass() {\n        // TODO caching\n        this.prototype.cache = false;\n    }\n    constructor($log, $injector, $q, restService, socketService, dataUtilsService, Collection,\n                ENDPOINTS) {\n        let DataService;\n        return new ((DataService = (function() {\n            let self = undefined;\n            DataService = class DataService {\n                static initClass() {\n                    self = null;\n    \n                //############# utils for testing\n                // register return values for the mocked get function\n                    this.prototype.mocks = {};\n                    this.prototype.spied = false;\n                }\n                constructor() {\n                    self = this;\n                    // setup socket listeners\n                    //socketService.eventStream.onUnsubscribe = @unsubscribeListener\n                    socketService.onclose = this.socketCloseListener;\n                    // generate loadXXX functions for root endpoints\n                    this.constructor.generateEndpoints();\n                }\n\n                // the arguments are in this order: endpoint, id, child, id of child, query\n                get(...args) {\n\n                    // get the query parameters\n                    let accessor, query, subscribePromise;\n                    [args, query] = Array.from(dataUtilsService.splitOptions(args));\n                    let subscribe = (accessor = undefined);\n\n                    // subscribe for changes if 'subscribe' is true\n                    subscribe = query.subscribe === true;\n                    ({ accessor } = query);\n                    if (subscribe && !accessor) {\n                        $log.warn(\"subscribe call should be done after DataService.open()\");\n                        $log.warn(\"for maintaining trace of observers\");\n                        subscribe = false;\n                    }\n\n                    // 'subscribe' is not part of the query\n                    delete query.subscribe;\n                    delete query.accessor;\n\n                    const restPath = dataUtilsService.restPath(args);\n                    // up to date array, this will be returned\n                    const collection = new Collection(restPath, query, accessor);\n\n                    if (subscribe) {\n                        subscribePromise = collection.subscribe();\n                    } else {\n                        subscribePromise = $q.resolve();\n                    }\n\n                    subscribePromise.then(() =>\n                        // get the data from the rest api\n                        restService.get(restPath, query).then(function(response) {\n\n                            const type = dataUtilsService.type(restPath);\n                            const datalist = response[type];\n                            // the response should always be an array\n                            if (!angular.isArray(datalist)) {\n                                const e = `${datalist} is not an array`;\n                                $log.error(e);\n                                return;\n                            }\n\n                            // fill up the collection with initial data\n                            return collection.initial(datalist);\n                        })\n                    );\n\n                    return collection;\n                }\n\n\n                control(ep, id, method, params) {\n                    if (params == null) { params = {}; }\n                    const restPath = dataUtilsService.restPath([ep, id]);\n                    return restService.post(restPath, {\n                        id: this.getNextId(),\n                        jsonrpc: '2.0',\n                        method,\n                        params\n                    }\n                    );\n                }\n\n                // returns next id for jsonrpc2 control messages\n                getNextId() {\n                    if (this.jsonrpc == null) { this.jsonrpc = 1; }\n                    return this.jsonrpc++;\n                }\n\n                // generate functions for root endpoints\n                static generateEndpoints() {\n                    return ENDPOINTS.forEach(e => {\n                        // capitalize endpoint names\n                        const E = dataUtilsService.capitalize(e);\n                        return this.prototype[`get${E}`] = (...args) => self.get(e, ...Array.from(args));\n                    });\n                }\n\n                // opens a new accessor\n                open() {\n                    let DataAccessor;\n                    return new ((DataAccessor = (function() {\n                        let collectionRefs = undefined;\n                        DataAccessor = class DataAccessor {\n                            static initClass() {\n                                collectionRefs = [];\n                            }\n                            constructor() {\n                                this.constructor.generateEndpoints();\n                            }\n\n                            registerCollection(c) {\n                                return collectionRefs.push(c);\n                            }\n\n                            close() {\n                                return collectionRefs.forEach(c => c.close());\n                            }\n\n                            // Closes the group when the scope is destroyed\n                            closeOnDestroy(scope) {\n                                if (!angular.isFunction(scope.$on)) {\n                                    throw new TypeError(\"Parameter 'scope' doesn't have an $on function\");\n                                }\n                                scope.$on('$destroy', () => this.close());\n                                return this;\n                            }\n\n                            // Generate functions for root endpoints\n                            static generateEndpoints() {\n                                return ENDPOINTS.forEach(e => {\n                                    // capitalize endpoint names\n                                    const E = dataUtilsService.capitalize(e);\n                                    return this.prototype[`get${E}`] = function(...args) {\n                                        let query;\n                                        [args, query] = Array.from(dataUtilsService.splitOptions(args));\n                                        if (query.subscribe == null) { query.subscribe = true; }\n                                        query.accessor = this;\n                                        return self.get(e, ...Array.from(args), query);\n                                    };\n                                });\n                            }\n                        };\n                        DataAccessor.initClass();\n                        return DataAccessor;\n                    })()));\n                }\n                when(url, query, returnValue) {\n                    if ((returnValue == null)) {\n                        [query, returnValue] = Array.from([{}, query]);\n                    }\n                    if ((typeof jasmine !== 'undefined' && jasmine !== null) && !this.spied) {\n                        spyOn(this, 'get').and.callFake(this._mockGet);\n                        this.spied = true;\n                    }\n\n                    if (this.mocks[url] == null) { this.mocks[url] = {}; }\n                    return this.mocks[url][query] = returnValue;\n                }\n\n                expect(url, query, returnValue) {\n                    if ((returnValue == null)) {\n                        [query, returnValue] = Array.from([{}, query]);\n                    }\n                    if (this._expects == null) { this._expects = []; }\n                    this._expects.push([url, query]);\n                    return this.when(url, query, returnValue);\n                }\n\n                verifyNoOutstandingExpectation() {\n                    if ((this._expects != null) && this._expects.length) {\n                        return fail(`expecting ${this._expects.length} more data requests ` +\n                            `(${angular.toJson(this._expects)})`);\n                    }\n                }\n\n                // register return values with the .when function\n                // when testing get will return the given values\n                _mockGet(...args) {\n                    const [url, query] = Array.from(this.processArguments(args));\n                    const queryWithoutSubscribe = {};\n                    for (let k in query) {\n                        const v = query[k];\n                        if ((k !== \"subscribe\") && (k !== \"accessor\")) {\n                            queryWithoutSubscribe[k] = v;\n                        }\n                    }\n                    if (this._expects) {\n                        const [exp_url, exp_query] = Array.from(this._expects.shift());\n                        expect(exp_url).toEqual(url);\n                        expect(exp_query).toEqual(queryWithoutSubscribe);\n                    }\n                    const returnValue = (this.mocks[url] != null ? this.mocks[url][query] : undefined) || (this.mocks[url] != null ? this.mocks[url][queryWithoutSubscribe] : undefined);\n                    if ((returnValue == null)) { throw new Error(`No return value for: ${url} ` +\n                        `(${angular.toJson(queryWithoutSubscribe)})`); }\n                    const collection = this.createCollection(url, queryWithoutSubscribe, returnValue);\n                    return collection;\n                }\n\n                processArguments(args) {\n                    let query;\n                    [args, query] = Array.from(dataUtilsService.splitOptions(args));\n                    const restPath = dataUtilsService.restPath(args);\n                    return [restPath, query || {}];\n                }\n\n\n                // for easier testing\n                createCollection(url, query, response) {\n                    const restPath = url;\n                    const type = dataUtilsService.type(restPath);\n                    const collection = new Collection(restPath, query);\n\n                    // populate the response with default ids\n                    // for convenience\n                    const { id } = collection;\n                    let idCounter = 1;\n                    response.forEach(function(d) {\n                        if (!d.hasOwnProperty(id)) {\n                            return d[id] = idCounter++;\n                        }\n                    });\n\n                    collection.initial(response);\n                    return collection;\n                }\n            };\n            DataService.initClass();\n            return DataService;\n        })()));\n    }\n}\nData.initClass();\n\n\nangular.module('bbData')\n.service('dataService', ['$log', '$injector', '$q', 'restService', 'socketService',\n                         'dataUtilsService', 'Collection', 'ENDPOINTS', Data]);\n","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS201: Simplify complex destructure assignments\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass DataUtils {\n    constructor() {\n        let dataUtilsService;\n        return new (dataUtilsService = class dataUtilsService {\n            // capitalize first word\n            capitalize(string) {\n                return string[0].toUpperCase() + string.slice(1).toLowerCase();\n            }\n\n            // returns the type of the endpoint\n            type(arg) {\n                let a = this.copyOrSplit(arg);\n                a = a.filter(e => e !== '*');\n                // if the argument count is even, the last argument is an id\n                if ((a.length % 2) === 0) { a.pop(); }\n                let type = a.pop();\n                if (type === \"contents\") {\n                    type = \"logchunks\";\n                }\n                return type;\n            }\n            // singularize the type name\n            singularType(arg) {\n                return this.type(arg).replace(/s$/, '');\n            }\n\n            className(arg) {\n                return this.capitalize(this.singularType(arg));\n            }\n\n            classId(arg) {\n                if (this.singularType(arg) === \"forcescheduler\") {\n                    return \"name\";\n                }\n                if (this.singularType(arg) === \"buildset\") {\n                    return \"bsid\";\n                }\n                return this.singularType(arg) + \"id\";\n            }\n\n            socketPath(arg) {\n                const a = this.copyOrSplit(arg);\n                // if the argument count is even, the last argument is an id\n                // Format of properties endpoint is an exception\n                // and needs to be properties/*, not properties/*/*\n                const stars = ['*'];\n                // is it odd?\n                if (((a.length % 2) === 1) && !arg.endsWith(\"/properties\")) { stars.push('*'); }\n                return a.concat(stars).join('/');\n            }\n\n            socketPathRE(socketPath) {\n                return new RegExp(`^${socketPath.replace(/\\*/g, \"[^/]+\")}$`);\n            }\n\n            restPath(arg) {\n                let a = this.copyOrSplit(arg);\n                a = a.filter(e => e !== '*');\n                return a.join('/');\n            }\n\n            endpointPath(arg) {\n                // if the argument count is even, the last argument is an id\n                let a = this.copyOrSplit(arg);\n                a = a.filter(e => e !== '*');\n                // is it even?\n                if ((a.length % 2) === 0) { a.pop(); }\n                return a.join('/');\n            }\n\n            copyOrSplit(arrayOrString) {\n                if (angular.isArray(arrayOrString)) {\n                    // return a copy\n                    return arrayOrString.slice();\n                } else if (angular.isString(arrayOrString)) {\n                    // split the string to get an array\n                    return arrayOrString.split('/');\n                } else {\n                    throw new TypeError(`Parameter 'arrayOrString' must be a array or a string, not ${typeof arrayOrString}`);\n                }\n            }\n\n            unWrap(object, path) {\n                return object[this.type(path)];\n            }\n\n            splitOptions(args) {\n                // keep defined arguments only\n                let accessor;\n                args = args.filter(e => e != null);\n\n                let query = {}; // default\n                // get the query parameters\n                const last = args[args.length - 1];\n                const subscribe = (accessor = null);\n\n                if (angular.isObject(last)) {\n                    query = args.pop();\n                }\n\n                return [args, query];\n            }\n\n            parse(object) {\n                for (let k in object) {\n                    const v = object[k];\n                    try {\n                        object[k] = angular.fromJson(v);\n                    } catch (error) {}\n                } // ignore\n                return object;\n            }\n\n            numberOrString(str = null) {\n                // if already a number\n                if (angular.isNumber(str)) { return str; }\n                // else parse string to integer\n                const number = parseInt(str, 10);\n                if (!isNaN(number)) { return number; } else { return str; }\n            }\n\n            emailInString(string) {\n                if (!angular.isString(string)) {\n                    throw new TypeError(`Parameter 'string' must be a string, not ${typeof string}`);\n                }\n                const emailRegex = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*/;\n                try {\n                    return emailRegex.exec(string).pop() || '';\n                } catch (error) {\n                    return '';\n                }\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.service('dataUtilsService', [DataUtils]);","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Rest {\n    constructor($http, $q, API) {\n        let RestService;\n        return new (RestService = class RestService {\n            execute(config) {\n                return $q((resolve, reject) =>\n                    $http(config)\n                    .success(function(response) {\n                        try {\n                            const data = angular.fromJson(response);\n                            return resolve(data);\n                        } catch (e) {\n                            return reject(e);\n                        }}).error(reason => reject(reason))\n                );\n            }\n\n            get(url, params) {\n                if (params == null) { params = {}; }\n                const canceller = $q.defer();\n                const config = {\n                    method: 'GET',\n                    url: this.parse(API, url),\n                    params,\n                    headers: {\n                        'Accept': 'application/json'\n                    },\n                    timeout: canceller.promise\n                };\n\n                const promise = this.execute(config);\n                promise.cancel = canceller.resolve;\n                return promise;\n            }\n\n            post(url, data) {\n                if (data == null) { data = {}; }\n                const canceller = $q.defer();\n                const config = {\n                    method: 'POST',\n                    url: this.parse(API, url),\n                    data,\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    timeout: canceller.promise\n                };\n\n                const promise = this.execute(config);\n                promise.cancel = canceller.resolve;\n                return promise;\n            }\n\n            parse(...args) {\n                return args.join('/').replace(/\\/\\//, '/');\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.service('restService', ['$http', '$q', 'API', Rest]);","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS206: Consider reworking classes to avoid initClass\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Socket {\n    constructor($log, $q, $rootScope, $location, Stream, webSocketService) {\n        let SocketService;\n        return new ((SocketService = (function() {\n            SocketService = class SocketService {\n                static initClass() {\n                    // subscribe to event stream to get WebSocket messages\n                    this.prototype.eventStream = null;\n                }\n\n                constructor() {\n                    // waiting queue\n                    this.queue = [];\n                    // deferred object for resolving response promises\n                    // map of id: promise\n                    this.deferred = {};\n                    this.subscribers = {};\n                    // open socket\n                    this.open();\n                }\n\n                open() {\n                    if (this.socket == null) { this.socket = webSocketService.getWebSocket(this.getUrl()); }\n\n                    // flush queue on open\n                    this.socket.onopen = () => this.flush();\n\n                    return this.setupEventStream();\n                }\n\n                setupEventStream() {\n                    if (this.eventStream == null) { this.eventStream = new Stream(); }\n\n                    return this.socket.onmessage = message => {\n                        let id;\n                        try {\n                            const data = angular.fromJson(message.data);\n\n                            // response message\n                            if (data.code != null) {\n                                id = data._id;\n                                if (data.code === 200) { return (this.deferred[id] != null ? this.deferred[id].resolve(true) : undefined);\n                                } else { return (this.deferred[id] != null ? this.deferred[id].reject(data) : undefined); }\n                            // status update message\n                            } else {\n                                return $rootScope.$applyAsync(() => {\n                                    return this.eventStream.push(data);\n                                });\n                            }\n                        } catch (e) {\n                            return (this.deferred[id] != null ? this.deferred[id].reject(e) : undefined);\n                        }\n                    };\n                }\n\n                close() {\n                    return this.socket.close();\n                }\n\n                send(data) {\n                    // add _id to each message\n                    const id = this.nextId();\n                    data._id = id;\n                    if (this.deferred[id] == null) { this.deferred[id] = $q.defer(); }\n\n                    data = angular.toJson(data);\n                    // ReconnectingWebSocket does not put status constants on instance\n                    if (this.socket.readyState === (this.socket.OPEN || 1)) {\n                        this.socket.send(data);\n                    } else {\n                        // if the WebSocket is not open yet, add the data to the queue\n                        this.queue.push(data);\n                    }\n\n                    // return promise, which will be resolved once a response message has the same id\n                    return this.deferred[id].promise;\n                }\n\n                flush() {\n                    // send all the data waiting in the queue\n                    return (() => {\n                        let data;\n                        const result = [];\n                        while ((data = this.queue.pop())) {\n                            result.push(this.socket.send(data));\n                        }\n                        return result;\n                    })();\n                }\n\n                nextId() {\n                    if (this.id == null) { this.id = 0; }\n                    this.id = this.id < 1000 ? this.id + 1 : 0;\n                    return this.id;\n                }\n\n                getRootPath() {\n                    return location.pathname;\n                }\n\n                getUrl() {\n                    const host = $location.host();\n                    const protocol = $location.protocol() === 'https' ? 'wss' : 'ws';\n                    const defaultport = $location.protocol() === 'https' ? 443 : 80;\n                    const path = this.getRootPath();\n                    const port = $location.port() === defaultport ? '' : `:${$location.port()}`;\n                    return `${protocol}://${host}${port}${path}ws`;\n                }\n\n                // High level api. Maintain a list of subscribers for one event path\n                subscribe(eventPath, collection) {\n                    const l = this.subscribers[eventPath] != null ? this.subscribers[eventPath] : (this.subscribers[eventPath] = []);\n                    l.push(collection);\n                    if (l.length === 1) {\n                        return this.send({\n                            cmd: \"startConsuming\",\n                            path: eventPath\n                        });\n                    }\n                    return $q.resolve();\n                }\n\n                unsubscribe(eventPath, collection) {\n                    const l = this.subscribers[eventPath] != null ? this.subscribers[eventPath] : (this.subscribers[eventPath] = []);\n                    const pos = l.indexOf(collection);\n                    if (pos >= 0) {\n                        l.splice(pos, 1);\n                        if (l.length === 0) {\n                            return this.send({\n                                cmd: \"stopConsuming\",\n                                path: eventPath\n                            });\n                        }\n                    }\n                    return $q.resolve();\n                }\n            };\n            SocketService.initClass();\n            return SocketService;\n        })()));\n    }\n}\n\n\nangular.module('bbData')\n.service('socketService', ['$log', '$q', '$rootScope', '$location', 'Stream', 'webSocketService', Socket]);","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS206: Consider reworking classes to avoid initClass\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nvar WebSocketBackend = (function() {\n    let self = undefined;\n    let MockWebSocket = undefined;\n    WebSocketBackend = class WebSocketBackend {\n        static initClass() {\n            self = null;\n\n            this.prototype.sendQueue = [];\n            this.prototype.receiveQueue = [];\n\n            // mocked WebSocket\n            MockWebSocket = (function() {\n                MockWebSocket = class MockWebSocket {\n                    static initClass() {\n                        this.prototype.OPEN = 1;\n                    }\n                    send(message) {\n                        return self.receiveQueue.push(message);\n                    }\n                    close() { return (typeof this.onclose === 'function' ? this.onclose() : undefined); }\n                };\n                MockWebSocket.initClass();\n                return MockWebSocket;\n            })();\n        }\n        constructor() {\n            self = this;\n            this.webSocket = new MockWebSocket();\n        }\n        send(message) {\n            const data = {data: message};\n            return this.sendQueue.push(data);\n        }\n\n        flush() {\n            return (() => {\n                let message;\n                const result = [];\n                while ((message = this.sendQueue.shift())) {\n                    result.push(this.webSocket.onmessage(message));\n                }\n                return result;\n            })();\n        }\n\n        getWebSocket() {\n            return this.webSocket;\n        }\n    };\n    WebSocketBackend.initClass();\n    return WebSocketBackend;\n})();\n\n\nangular.module('bbData')\n.service('webSocketBackendService', [WebSocketBackend]);","/*\n * decaffeinate suggestions:\n * DS102: Remove unnecessary code created because of implicit returns\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass WebSocket {\n    constructor($window) {\n        let WebSocketProvider;\n        return new (WebSocketProvider = class WebSocketProvider {\n            constructor() {}\n\n            // this function will be mocked in the tests\n            getWebSocket(url) {\n                const match = /wss?:\\/\\//.exec(url);\n\n                if (!match) {\n                    throw new Error('Invalid url provided');\n                }\n\n                // use ReconnectingWebSocket if available\n                // TODO write own implementation?\n                if ($window.ReconnectingWebSocket != null) {\n                    return new $window.ReconnectingWebSocket(url);\n                } else {\n                    return new $window.WebSocket(url);\n                }\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.service('webSocketService', ['$window', WebSocket]);","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS206: Consider reworking classes to avoid initClass\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Stream {\n    constructor() {\n        let StreamInstance;\n        return StreamInstance = (function() {\n            StreamInstance = class StreamInstance {\n                static initClass() {\n                    // the unsubscribe listener will be called on each unsubscribe call\n                    this.prototype.onUnsubscribe = null;\n                    this.prototype.listeners = [];\n                }\n\n                subscribe(listener) {\n                    if (!angular.isFunction(listener)) {\n                        throw new TypeError(`Parameter 'listener' must be a function, not ${typeof listener}`);\n                    }\n\n                    listener.id = this.generateId();\n                    this.listeners.push(listener);\n\n                    // unsubscribe\n                    return () => {\n                        const i = this.listeners.indexOf(listener);\n                        const removed = this.listeners.splice(i, 1);\n                        // call the unsubscribe listener if it's a function\n                        if (angular.isFunction(this.onUnsubscribe)) {\n                            return this.onUnsubscribe(listener);\n                        }\n                    };\n                }\n\n                push(data) {\n                    // call each listener\n                    return Array.from(this.listeners).map((listener) => listener(data));\n                }\n\n                destroy() {\n                    // @listeners = [], but keep the reference\n                    return (() => {\n                        const result = [];\n                        while (this.listeners.length > 0) {\n                            result.push(this.listeners.pop());\n                        }\n                        return result;\n                    })();\n                }\n\n                generateId() {\n                    if (this.lastId == null) { this.lastId = 0; }\n                    return this.lastId++;\n                }\n            };\n            StreamInstance.initClass();\n            return StreamInstance;\n        })();\n    }\n}\n\n\nangular.module('bbData')\n.factory('Stream', [Stream]);","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass Collection {\n    constructor($q, $injector, $log, dataUtilsService, socketService, DataQuery, $timeout) {\n        let CollectionInstance;\n\n        angular.isArray = (Array.isArray = arg => arg instanceof Array);\n        CollectionInstance = class CollectionInstance extends Array {\n            constructor(restPath, query, accessor) {\n                // this contructor is used to construct completely new instances only.\n                // We override constructor property for existing instances so that\n                // Array.prototype.filter() passes the restPath, query and accessor properties\n                // to the new instance.\n                super();\n                this.constructorImpl(restPath, query, accessor);\n            }\n\n            constructorImpl(restPath, query, accessor) {\n                let className;\n                this.listener = this.listener.bind(this);\n                this.restPath = restPath;\n                if (query == null) { query = {}; }\n                this.query = query;\n                this.accessor = accessor;\n                this.socketPath = dataUtilsService.socketPath(this.restPath);\n                this.type = dataUtilsService.type(this.restPath);\n                this.id = dataUtilsService.classId(this.restPath);\n                this.endpoint = dataUtilsService.endpointPath(this.restPath);\n                this.socketPathRE = dataUtilsService.socketPathRE(this.socketPath);\n                this.queryExecutor = new DataQuery(this.query);\n                // default event handlers\n                this.onUpdate = angular.noop;\n                this.onNew = angular.noop;\n                this.onChange = angular.noop;\n                this._new = [];\n                this._updated = [];\n                this._byId = {};\n                this.$resolved = false;\n                try {\n                    // try to get the wrapper class\n                    className = dataUtilsService.className(this.restPath);\n                    // the classes have the dataService as a dependency\n                    // $injector.get doesn't throw circular dependency exception\n                    this.WrapperClass = $injector.get(className);\n                } catch (e) {\n                    // use the Base class otherwise\n                    console.log(\"unknown wrapper for\", className);\n                    this.WrapperClass = $injector.get('Base');\n                }\n                socketService.eventStream.subscribe(this.listener);\n                if (this.accessor != null) {\n                    this.accessor.registerCollection(this);\n                }\n            }\n\n            then(callback) {\n                console.log(\"Should not use collection as a promise. Callback will be called several times!\");\n                return this.onChange = callback;\n            }\n\n            getArray() {\n                console.log(\"getArray() is deprecated. dataService.get() directly returns the collection!\");\n                return this;\n            }\n\n            get(id) {\n                return this._byId[id];\n            }\n\n            hasOwnProperty(id) {\n                return this._byId.hasOwnProperty(id);\n            }\n\n            listener(data) {\n                const key = data.k;\n                const message = data.m;\n                // Test if the message is for me\n                if (this.socketPathRE.test(key)) {\n                    this.put(message);\n                    this.recomputeQuery();\n                    return this.sendEvents();\n                }\n            }\n\n            subscribe() {\n                return socketService.subscribe(this.socketPath, this);\n            }\n\n            close() {\n                return socketService.unsubscribe(this.socketPath, this);\n            }\n\n            initial(data) {\n                this.$resolved = true;\n                // put items one by one if not already in the array\n                // if they are that means they come from an update event\n                // the event is always considered the latest data\n                // so we don't overwrite it with REST data\n                for (let i of Array.from(data)) {\n                    if (!this.hasOwnProperty(i[this.id])) {\n                        this.put(i);\n                    }\n                }\n                this.recomputeQuery();\n                return this.sendEvents({initial:true});\n            }\n\n            from(data) {\n                // put items one by one\n                for (let i of Array.from(data)) { this.put(i); }\n                this.recomputeQuery();\n                return this.sendEvents();\n            }\n\n            item(i) {\n                return this[i];\n            }\n\n            add(element) {\n                // don't create wrapper if element is filtered\n                if (this.queryExecutor.filter([element]).length === 0) {\n                    return;\n                }\n                const instance = new this.WrapperClass(element, this.endpoint);\n                instance.setAccessor(this.accessor);\n                instance.$collection = this;\n                this._new.push(instance);\n                this._byId[instance[this.id]] = instance;\n                return this.push(instance);\n            }\n\n            put(element) {\n                for (let old of Array.from(this)) {\n                    if (old[this.id] === element[this.id]) {\n                        old.update(element);\n                        this._updated.push(old);\n                        return;\n                    }\n                }\n                // if not found, add it.\n                return this.add(element);\n            }\n\n            clear() {\n                return (() => {\n                    const result = [];\n                    while (this.length > 0) {\n                        result.push(this.pop());\n                    }\n                    return result;\n                })();\n            }\n\n            delete(element) {\n                const index = this.indexOf(element);\n                if (index > -1) { return this.splice(index, 1); }\n            }\n\n            recomputeQuery() {\n                return this.queryExecutor.computeQuery(this);\n            }\n\n            sendEvents(opts){\n                // send the events asynchronously\n                const { _new } = this;\n                const { _updated } = this;\n                this._updated = [];\n                this._new = [];\n                return $timeout(() => {\n                    let i;\n                    let changed = false;\n                    for (i of Array.from(_new)) {\n                        // is it still in the array?\n                        if (Array.from(this).includes(i)) {\n                            this.onNew(i);\n                            changed = true;\n                        }\n                    }\n\n                    for (i of Array.from(_updated)) {\n                        // is it still in the array?\n                        if (Array.from(this).includes(i)) {\n                            this.onUpdate(i);\n                            changed = true;\n                        }\n                    }\n\n                    if (changed || (opts != null ? opts.initial : undefined)) {\n                        return this.onChange(this);\n                    }\n                }\n                , 0);\n            }\n        };\n        // see explanation in CollectionInstance.constructor() above\n        Object.defineProperty(CollectionInstance.prototype, 'constructor', {\n            get: function() {\n                let copyFrom = this;\n                return function(length) {\n                    return copyFrom.constructorImpl(copyFrom.restPath, copyFrom.query,\n                                                    copyfrom.accessor);\n                };\n            }\n        });\n        return CollectionInstance;\n    }\n}\n\n\nangular.module('bbData')\n.factory('Collection', ['$q', '$injector', '$log', 'dataUtilsService', 'socketService', 'DataQuery', '$timeout', Collection]);","/*\n * decaffeinate suggestions:\n * DS101: Remove unnecessary use of Array.from\n * DS102: Remove unnecessary code created because of implicit returns\n * DS203: Remove `|| {}` from converted for-own loops\n * DS205: Consider reworking code to avoid use of IIFEs\n * DS207: Consider shorter variations of null checks\n * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md\n */\nclass DataQuery {\n    constructor($http, $q, API) {\n        let DataQueryClass;\n        return (DataQueryClass = class DataQueryClass {\n            constructor(query) {\n                if (query == null) { query = {}; }\n                this.query = query;\n                this.filters = {};\n                for (let fieldAndOperator in query) {\n                    let value = query[fieldAndOperator];\n                    if (['field', 'limit', 'offset', 'order', 'property'].indexOf(fieldAndOperator) < 0) {\n                        if (['on', 'true', 'yes'].indexOf(value) > -1) { value = true;\n                        } else if (['off', 'false', 'no'].indexOf(value) > -1) { value = false; }\n                        this.filters[fieldAndOperator] = value;\n                    }\n                }\n            }\n\n            computeQuery(array) {\n                // 1. filtering\n                this.filter(array);\n\n                // 2. sorting\n                const order = this.query != null ? this.query.order : undefined;\n                this.sort(array, order);\n\n                // 3. limit\n                const limit = this.query != null ? this.query.limit : undefined;\n                return this.limit(array, limit);\n            }\n\n\n            isFiltered(v) {\n                const cmpByOp = {};\n                for (let fieldAndOperator in this.filters) {\n                    const value = this.filters[fieldAndOperator];\n                    const [field, operator] = Array.from(fieldAndOperator.split('__'));\n                    let cmp = false;\n                    switch (operator) {\n                        case 'ne': cmp = v[field] !== value; break;\n                        case 'lt': cmp = v[field] <  value; break;\n                        case 'le': cmp = v[field] <= value; break;\n                        case 'gt': cmp = v[field] >  value; break;\n                        case 'ge': cmp = v[field] >= value; break;\n                        default: cmp = (v[field] === value) ||\n                            (angular.isArray(v[field]) && Array.from(v[field]).includes(value)) ||\n                            (angular.isArray(value) && (value.length === 0)) ||\n                            (angular.isArray(value) && Array.from(value).includes(v[field])) ||\n                            // private fields added by the data service\n                            (v[`_${field}`] === value) ||\n                            (angular.isArray(v[`_${field}`]) && Array.from(v[`_${field}`]).includes(value)) ||\n                            (angular.isArray(value) && Array.from(value).includes(v[`_${field}`]));\n                    }\n                    cmpByOp[fieldAndOperator] = cmpByOp[fieldAndOperator] || cmp;\n                }\n                for (let op of Object.keys(cmpByOp || {})) {\n                    v = cmpByOp[op];\n                    if (!v) { return false; }\n                }\n                return true;\n            }\n\n            filter(array) {\n                let i = 0;\n                return (() => {\n                    const result = [];\n                    while (i < array.length) {\n                        const v = array[i];\n                        if (this.isFiltered(v)) {\n                            result.push(i += 1);\n                        } else {\n                            result.push(array.splice(i, 1));\n                        }\n                    }\n                    return result;\n                })();\n            }\n\n            sort(array, order) {\n                const compare = function(property) {\n                    let reverse = false;\n                    if (property[0] === '-') {\n                        property = property.slice(1);\n                        reverse = true;\n                    }\n\n                    return function(a, b) {\n                        if (reverse) { [a, b] = Array.from([b, a]); }\n\n                        if (a[property] < b[property]) { return -1;\n                        } else if (a[property] > b[property]) { return 1;\n                        } else { return 0; }\n                    };\n                };\n                if (angular.isString(order)) {\n                    return array.sort(compare(order));\n                } else if (angular.isArray(order)) {\n                    return array.sort(function(a, b) {\n                        for (let o of Array.from(order)) {\n                            const f = compare(o)(a, b);\n                            if (f) { return f; }\n                        }\n                        return 0;\n                    });\n                }\n            }\n\n            limit(array, limit) {\n                return (() => {\n                    const result = [];\n                    while (array.length > limit) {\n                        result.push(array.pop());\n                    }\n                    return result;\n                })();\n            }\n        });\n    }\n}\n\n\nangular.module('bbData')\n.factory('DataQuery', ['$http', '$q', 'API', DataQuery]);"],"sourceRoot":"/source/"}